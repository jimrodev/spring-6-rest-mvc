server.port=8080
# Para devolver el mensaje de error en la respuesta (Exception.message))
server.error.include-message=always

# Con la siguiente configuracion establecemos el nivel de logging a debug a todo en el package guru.springframework
# Muestra la informacion de debug en la consola
# 2023-11-11T20:07:42.846+01:00 DEBUG 21620 --- [ main] g.s.s.controllers.BeerController : Get Beer by id - in controller
# 2023-11-11T20:07:42.846+01:00 DEBUG 21620 --- [ main] g.s.s.services.BeerServiceImpl   : Get Beer by Id - in service. Id: 7b29224a-eaef-4497-9fc3-bc1d542cc35e
# Debug levels [trace, debug, info, warn, error]
logging.level.guru.springframework=debug
# V220
# 2024-02-05T12:10:23.305+01:00 TRACE 13828 --- [           main] o.s.security.web.FilterChainProxy        : Invoking CsrfFilter (5/15)
# 2024-02-05T12:10:23.312+01:00 DEBUG 13828 --- [           main] o.s.security.web.csrf.CsrfFilter         : Invalid CSRF token found for http://localhost/api/v1/beer
# logging.level.org.springframework.security=trace

# server.error.include-binding-errors=NEVER
# server.error.include-exception=false
# server.error.include-message=NEVER
# server.error.include-stacktrace=NEVER
# server.error.path=/error
# server.error.whitelabel.enabled=true

# http://localhost:8080/h2-console/
spring.h2.console.enabled=true
#spring.jpa.show-sql=true
# Deshabilitamos FlyWay en las pruebas para que no haya el problema de compatibidad de los scripts al crear el Schema en H2
# La otra solución es tocar los scripts para que sean agnosticos del vendor
# O crear scips específicos para cada vendor H2, MySQl
spring.flyway.enabled=false
spring.security.user.name=user1
spring.security.user.password=password

